function [thetalistIterates,thetalist, success] = IKinBodyIterates(Blist, M, T, thetalist0, eomg, ev)

%The following code is based on the 'IKinBody' function,
%shows in detail the calculations in each iteration of the Newton-Raphson algorithm.
%Only the new lines of code are commented below.

thetalist = thetalist0;

% Gets the column vector "thetalist" in a row vector with the transpose and stores it in the first row of "thetalistIterates".
thetalistIterates(1,:)=thetalist'; %New

i = 0;
maxiterations = 20;
Vb = se3ToVec(MatrixLog6(TransInv(FKinBody(M, Blist, thetalist)) * T));
err = norm(Vb(1: 3)) > eomg || norm(Vb(4: 6)) > ev;
while err && i < maxiterations

% Start delivering the values of interest for the report
  fprintf('   Iteracion : %d\n', i);          %New
  fprintf('joint vector : %d\n');             %New
  thetalist'                                  %New
  fprintf('SE(3) end−effector config : %d\n');%New

% Calculates end-effector configuration for the joint vector "i"
  Ti = FKinBody(M,Blist,thetalist)            %New

  fprintf('          error twist V_b : %d\n');%New
  Vb'                                         %New
  fprintf('angular error magnitude ∣∣omega_b∣∣ : %d\n', norm(Vb(1: 3))');   %New
  fprintf('linear error magnitude ∣∣v_b∣∣ : %d\n', norm(Vb(4: 6))');        %New
% End delivering the values of interest for the report


    thetalist = thetalist + pinv(JacobianBody(Blist, thetalist)) * Vb;
    i = i + 1;
    Vb = se3ToVec(MatrixLog6(TransInv(FKinBody(M, Blist, thetalist)) * T));
    err = norm(Vb(1: 3)) > eomg || norm(Vb(4: 6)) > ev;

    % Stores the new column vector "thetalist" in the corresponding row of "thetalistIterates"
    thetalistIterates(i+1,:)=thetalist';    %New
end
success = ~ err;

% Create the .CSV file with the articulation vector values for each iteration of the Newton-Raphson algorithm.
csvwrite('iterates.csv', thetalistIterates);%New

end